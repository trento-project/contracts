// Code generated by schema-generate. DO NOT EDIT.

package entities

import (
	"encoding/json"
	"time"

	"github.com/trento-project/contracts/go/pkg/validator"
	"github.com/xeipuuv/gojsonschema"
	"go.uber.org/multierr"

	cloudevents "github.com/cloudevents/sdk-go/v2"
	"github.com/google/uuid"
	"github.com/pkg/errors"
)

// AgentCheckResult 
type AgentCheckResult struct {
  AgentId string `json:"agent_id"`
  ExpectationEvaluations []interface{} `json:"expectation_evaluations"`
  Facts map[string]interface{} `json:"facts"`
}

// CheckResult 
type CheckResult struct {
  AgentsCheckResults []*AgentCheckResult `json:"agents_check_results"`
  CheckId string `json:"check_id"`
  ExpectationResults []*ExpectationResult `json:"expectation_results"`
  Result string `json:"result"`
}

// ExecutionCompletedV1 
type ExecutionCompletedV1 struct {
  CheckResults []*CheckResult `json:"check_results"`
  ExecutionId string `json:"execution_id"`
  GroupId string `json:"group_id"`
  Result string `json:"result"`
}

// ExpectationResult 
type ExpectationResult struct {
  Name string `json:"name"`
  Result bool `json:"result"`
  Type string `json:"type"`
}

func serializeExecutionCompletedV1FromJson(rawJson []byte) (*ExecutionCompletedV1, error) {
	var event ExecutionCompletedV1
	err := json.Unmarshal(rawJson, &event)
	if err != nil {
		return nil, err
	}

	err = event.Valid()
	if err != nil {
		return nil, err
	}

	return &event, nil
}

func (e *ExecutionCompletedV1) Valid() error {
	schema, err := validator.GetSchema("schemas/trento.checks.v1.wanda.ExecutionCompleted.schema.json")
	if err != nil {
		return err
	}

	result, err := gojsonschema.Validate(gojsonschema.NewBytesLoader([]byte(schema)), gojsonschema.NewGoLoader(e))
	if err != nil {
		return err
	}

	var validationError error
	schemaErrors := result.Errors()
	for _, e := range schemaErrors {
		validationError = multierr.Append(validationError, errors.New(e.String()))
	}

	return validationError
}

func (e *ExecutionCompletedV1) Source() string {
	return "trento/wanda"
}


func (e *ExecutionCompletedV1) Type() string {
	return "trento.checks.v1.wanda.ExecutionCompleted"
}


func (e *ExecutionCompletedV1) Json() ([]byte, error) {
	err := e.Valid()
	if err != nil {
		return nil, errors.Wrap(err, "the entity is invalid")
	}

	event := cloudevents.NewEvent()
	event.SetID(uuid.New().String())
	event.SetSource(e.Source())
	event.SetTime(time.Now())
	event.SetType(e.Type())

	data, err := json.Marshal(e)
	if err != nil {
		return nil, errors.Wrapf(err, "could not serialize event %s", e.Type())
	}

	err = event.SetData(cloudevents.ApplicationJSON, data)
	if err != nil {
		return nil, errors.Wrapf(err, "could not set data for cloud event of type %s", e.Type())
	}
	evt, err := json.Marshal(event)
	if err != nil {
		return nil, errors.Wrapf(err, "could not serialize cloud event of type %s", e.Type())
	}

	return evt, nil
}

func NewExecutionCompletedV1FromJson(rawJson []byte) (*ExecutionCompletedV1, error) {
	var decoded ExecutionCompletedV1

	event := cloudevents.NewEvent()

	err := json.Unmarshal(rawJson, &event)
	if err != nil {
		return nil, errors.Wrap(err, "could not serialize the json into a cloud event")
	}

	rawEvent := event.Data()

	err = json.Unmarshal(rawEvent, &decoded)
	if err != nil {
		return nil, errors.Wrap(err, "could not unmarshal the cloud event data into the proper event")
	}

	err = decoded.Valid()
	if err != nil {
		return nil, errors.Wrap(err, "the entity is invalid")
	}

	return &decoded, nil
}


