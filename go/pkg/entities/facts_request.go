// Code generated by schema-generate. DO NOT EDIT.

package entities


import (
	"encoding/json"
	"errors"

	"github.com/cdimonaco/contracts/go/pkg/validator"
	"github.com/xeipuuv/gojsonschema"
	"go.uber.org/multierr"
)

// FactsItems 
type FactsItems struct {
  Argument string `json:"argument,omitempty"`
  CheckId string `json:"check_id"`
  Gatherer string `json:"gatherer"`
  Name string `json:"name"`
}

// FactsRequestV1 
type FactsRequestV1 struct {
  ExecutionId string `json:"execution_id"`
  Facts []*FactsItems `json:"facts"`
}

// Validation code 

func NewFactsRequestV1FromJson(rawJson []byte) (*FactsRequestV1, error) {
	var event FactsRequestV1
	err := json.Unmarshal(rawJson, &event)
	if err != nil {
		return nil, err
	}

	err = event.Valid()
	if err != nil {
		return nil, err
	}

	return &event, nil
}

func (e *FactsRequestV1) Valid() error {
	schema, err := validator.GetSchema("schemas/trento.checks.v1.FactsRequest.schema.json")
	if err != nil {
		return err
	}

	result, err := gojsonschema.Validate(gojsonschema.NewBytesLoader([]byte(schema)), gojsonschema.NewGoLoader(e))
	if err != nil {
		return err
	}

	var validationError error
	schemaErrors := result.Errors()
	for _, e := range schemaErrors {
		validationError = multierr.Append(validationError, errors.New(e.String()))
	}

	return validationError
}

