// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobuf/execution_completed.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Trento.Checks.V1.ExecutionCompleted)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExecutionCompleted {
    // message fields
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionCompleted.execution_id)
    pub execution_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionCompleted.group_id)
    pub group_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionCompleted.result)
    pub result: ::protobuf::EnumOrUnknown<Result>,
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionCompleted.target_type)
    pub target_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Trento.Checks.V1.ExecutionCompleted.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExecutionCompleted {
    fn default() -> &'a ExecutionCompleted {
        <ExecutionCompleted as ::protobuf::Message>::default_instance()
    }
}

impl ExecutionCompleted {
    pub fn new() -> ExecutionCompleted {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "execution_id",
            |m: &ExecutionCompleted| { &m.execution_id },
            |m: &mut ExecutionCompleted| { &mut m.execution_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &ExecutionCompleted| { &m.group_id },
            |m: &mut ExecutionCompleted| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "result",
            |m: &ExecutionCompleted| { &m.result },
            |m: &mut ExecutionCompleted| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_type",
            |m: &ExecutionCompleted| { &m.target_type },
            |m: &mut ExecutionCompleted| { &mut m.target_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExecutionCompleted>(
            "ExecutionCompleted",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExecutionCompleted {
    const NAME: &'static str = "ExecutionCompleted";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.execution_id = is.read_string()?;
                },
                18 => {
                    self.group_id = is.read_string()?;
                },
                24 => {
                    self.result = is.read_enum_or_unknown()?;
                },
                34 => {
                    self.target_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.execution_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.execution_id);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.group_id);
        }
        if self.result != ::protobuf::EnumOrUnknown::new(Result::PASSING) {
            my_size += ::protobuf::rt::int32_size(3, self.result.value());
        }
        if !self.target_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.target_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.execution_id.is_empty() {
            os.write_string(1, &self.execution_id)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(2, &self.group_id)?;
        }
        if self.result != ::protobuf::EnumOrUnknown::new(Result::PASSING) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.result))?;
        }
        if !self.target_type.is_empty() {
            os.write_string(4, &self.target_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExecutionCompleted {
        ExecutionCompleted::new()
    }

    fn clear(&mut self) {
        self.execution_id.clear();
        self.group_id.clear();
        self.result = ::protobuf::EnumOrUnknown::new(Result::PASSING);
        self.target_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExecutionCompleted {
        static instance: ExecutionCompleted = ExecutionCompleted {
            execution_id: ::std::string::String::new(),
            group_id: ::std::string::String::new(),
            result: ::protobuf::EnumOrUnknown::from_i32(0),
            target_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExecutionCompleted {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExecutionCompleted").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExecutionCompleted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecutionCompleted {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:Trento.Checks.V1.Result)
pub enum Result {
    // @@protoc_insertion_point(enum_value:Trento.Checks.V1.Result.PASSING)
    PASSING = 0,
    // @@protoc_insertion_point(enum_value:Trento.Checks.V1.Result.WARNING)
    WARNING = 1,
    // @@protoc_insertion_point(enum_value:Trento.Checks.V1.Result.CRITICAL)
    CRITICAL = 2,
}

impl ::protobuf::Enum for Result {
    const NAME: &'static str = "Result";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Result> {
        match value {
            0 => ::std::option::Option::Some(Result::PASSING),
            1 => ::std::option::Option::Some(Result::WARNING),
            2 => ::std::option::Option::Some(Result::CRITICAL),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Result> {
        match str {
            "PASSING" => ::std::option::Option::Some(Result::PASSING),
            "WARNING" => ::std::option::Option::Some(Result::WARNING),
            "CRITICAL" => ::std::option::Option::Some(Result::CRITICAL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Result] = &[
        Result::PASSING,
        Result::WARNING,
        Result::CRITICAL,
    ];
}

impl ::protobuf::EnumFull for Result {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Result").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Result {
    fn default() -> Self {
        Result::PASSING
    }
}

impl Result {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Result>("Result")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"protobuf/execution_completed.proto\x12\x10Trento.Checks.V1\"\xa5\x01\
    \n\x12ExecutionCompleted\x12!\n\x0cexecution_id\x18\x01\x20\x01(\tR\x0be\
    xecutionId\x12\x19\n\x08group_id\x18\x02\x20\x01(\tR\x07groupId\x120\n\
    \x06result\x18\x03\x20\x01(\x0e2\x18.Trento.Checks.V1.ResultR\x06result\
    \x12\x1f\n\x0btarget_type\x18\x04\x20\x01(\tR\ntargetType*0\n\x06Result\
    \x12\x0b\n\x07PASSING\x10\0\x12\x0b\n\x07WARNING\x10\x01\x12\x0c\n\x08CR\
    ITICAL\x10\x02B\nZ\x08/;eventsJ\xb8\x03\n\x06\x12\x04\0\0\x10\x01\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x19\n\x08\n\x01\
    \x08\x12\x03\x03\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x03\0\x1f\n\n\n\x02\x05\
    \0\x12\x04\x05\0\t\x01\n\n\n\x03\x05\0\x01\x12\x03\x05\x05\x0b\n\x0b\n\
    \x04\x05\0\x02\0\x12\x03\x06\x04\x10\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x06\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x06\x0e\x0f\n\x0b\n\x04\
    \x05\0\x02\x01\x12\x03\x07\x04\x10\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \x07\x04\x0b\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x07\x0e\x0f\n\x0b\n\
    \x04\x05\0\x02\x02\x12\x03\x08\x04\x11\n\x0c\n\x05\x05\0\x02\x02\x01\x12\
    \x03\x08\x04\x0c\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x08\x0f\x10\n\n\n\
    \x02\x04\0\x12\x04\x0b\0\x10\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x1a\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x04\x1c\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\x0b\x17\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x0c\x1a\x1b\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\r\x04\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\r\x0b\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\r\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0e\x04\x16\n\x0c\n\x05\
    \x04\0\x02\x02\x06\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\x0e\x0b\x11\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0e\x14\x15\n\x0b\
    \n\x04\x04\0\x02\x03\x12\x03\x0f\x04\x1b\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\x0f\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0f\x0b\x16\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x0f\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ExecutionCompleted::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Result::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
