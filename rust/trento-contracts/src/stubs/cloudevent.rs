// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobuf/cloudevent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

///  CloudEvent is copied from
///  https://github.com/cloudevents/spec/blob/master/protobuf-format.md.
// @@protoc_insertion_point(message:CloudEvents.CloudEvent)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CloudEvent {
    // message fields
    ///  Unique event identifier.
    // @@protoc_insertion_point(field:CloudEvents.CloudEvent.id)
    pub id: ::std::string::String,
    ///  URI of the event source.
    // @@protoc_insertion_point(field:CloudEvents.CloudEvent.source)
    pub source: ::std::string::String,
    ///  Version of the spec in use.
    // @@protoc_insertion_point(field:CloudEvents.CloudEvent.spec_version)
    pub spec_version: ::std::string::String,
    ///  Event type identifier.
    // @@protoc_insertion_point(field:CloudEvents.CloudEvent.type)
    pub type_: ::std::string::String,
    ///  Optional & Extension Attributes
    // @@protoc_insertion_point(field:CloudEvents.CloudEvent.attributes)
    pub attributes: ::std::collections::HashMap<::std::string::String, CloudEventAttributeValue>,
    // message oneof groups
    pub data: ::std::option::Option<cloud_event::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:CloudEvents.CloudEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CloudEvent {
    fn default() -> &'a CloudEvent {
        <CloudEvent as ::protobuf::Message>::default_instance()
    }
}

impl CloudEvent {
    pub fn new() -> CloudEvent {
        ::std::default::Default::default()
    }

    // bytes binary_data = 6;

    pub fn binary_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::BinaryData(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_binary_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_binary_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::BinaryData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_binary_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(cloud_event::Data::BinaryData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_binary_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(cloud_event::Data::BinaryData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(cloud_event::Data::BinaryData(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::BinaryData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_binary_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_binary_data() {
            match self.data.take() {
                ::std::option::Option::Some(cloud_event::Data::BinaryData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string text_data = 7;

    pub fn text_data(&self) -> &str {
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::TextData(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_text_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_text_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::TextData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_data(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(cloud_event::Data::TextData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_data(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(cloud_event::Data::TextData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(cloud_event::Data::TextData(::std::string::String::new()));
        }
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::TextData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_data(&mut self) -> ::std::string::String {
        if self.has_text_data() {
            match self.data.take() {
                ::std::option::Option::Some(cloud_event::Data::TextData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Any proto_data = 8;

    pub fn proto_data(&self) -> &::protobuf::well_known_types::any::Any {
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::ProtoData(ref v)) => v,
            _ => <::protobuf::well_known_types::any::Any as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_proto_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_proto_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::ProtoData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proto_data(&mut self, v: ::protobuf::well_known_types::any::Any) {
        self.data = ::std::option::Option::Some(cloud_event::Data::ProtoData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proto_data(&mut self) -> &mut ::protobuf::well_known_types::any::Any {
        if let ::std::option::Option::Some(cloud_event::Data::ProtoData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(cloud_event::Data::ProtoData(::protobuf::well_known_types::any::Any::new()));
        }
        match self.data {
            ::std::option::Option::Some(cloud_event::Data::ProtoData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proto_data(&mut self) -> ::protobuf::well_known_types::any::Any {
        if self.has_proto_data() {
            match self.data.take() {
                ::std::option::Option::Some(cloud_event::Data::ProtoData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::any::Any::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &CloudEvent| { &m.id },
            |m: &mut CloudEvent| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "source",
            |m: &CloudEvent| { &m.source },
            |m: &mut CloudEvent| { &mut m.source },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "spec_version",
            |m: &CloudEvent| { &m.spec_version },
            |m: &mut CloudEvent| { &mut m.spec_version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &CloudEvent| { &m.type_ },
            |m: &mut CloudEvent| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "attributes",
            |m: &CloudEvent| { &m.attributes },
            |m: &mut CloudEvent| { &mut m.attributes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "binary_data",
            CloudEvent::has_binary_data,
            CloudEvent::binary_data,
            CloudEvent::set_binary_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "text_data",
            CloudEvent::has_text_data,
            CloudEvent::text_data,
            CloudEvent::set_text_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::any::Any>(
            "proto_data",
            CloudEvent::has_proto_data,
            CloudEvent::proto_data,
            CloudEvent::mut_proto_data,
            CloudEvent::set_proto_data,
        ));
        oneofs.push(cloud_event::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CloudEvent>(
            "CloudEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CloudEvent {
    const NAME: &'static str = "CloudEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.source = is.read_string()?;
                },
                26 => {
                    self.spec_version = is.read_string()?;
                },
                34 => {
                    self.type_ = is.read_string()?;
                },
                42 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            18 => value = is.read_message()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.attributes.insert(key, value);
                },
                50 => {
                    self.data = ::std::option::Option::Some(cloud_event::Data::BinaryData(is.read_bytes()?));
                },
                58 => {
                    self.data = ::std::option::Option::Some(cloud_event::Data::TextData(is.read_string()?));
                },
                66 => {
                    self.data = ::std::option::Option::Some(cloud_event::Data::ProtoData(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if !self.spec_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.spec_version);
        }
        if !self.type_.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.type_);
        }
        for (k, v) in &self.attributes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.compute_size();
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &cloud_event::Data::BinaryData(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(6, &v);
                },
                &cloud_event::Data::TextData(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
                &cloud_event::Data::ProtoData(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if !self.spec_version.is_empty() {
            os.write_string(3, &self.spec_version)?;
        }
        if !self.type_.is_empty() {
            os.write_string(4, &self.type_)?;
        }
        for (k, v) in &self.attributes {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            let len = v.cached_size() as u64;
            entry_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            os.write_raw_varint32(42)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &cloud_event::Data::BinaryData(ref v) => {
                    os.write_bytes(6, v)?;
                },
                &cloud_event::Data::TextData(ref v) => {
                    os.write_string(7, v)?;
                },
                &cloud_event::Data::ProtoData(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CloudEvent {
        CloudEvent::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.source.clear();
        self.spec_version.clear();
        self.type_.clear();
        self.attributes.clear();
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CloudEvent {
        static instance: ::protobuf::rt::Lazy<CloudEvent> = ::protobuf::rt::Lazy::new();
        instance.get(CloudEvent::new)
    }
}

impl ::protobuf::MessageFull for CloudEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CloudEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CloudEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CloudEvent`
pub mod cloud_event {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CloudEvents.CloudEvent.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEvent.binary_data)
        BinaryData(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEvent.text_data)
        TextData(::std::string::String),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEvent.proto_data)
        ProtoData(::protobuf::well_known_types::any::Any),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CloudEvent as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

///  CloudEventAttribute enables extensions to use any of the seven allowed
///  data types as the value of an envelope key.
// @@protoc_insertion_point(message:CloudEvents.CloudEventAttributeValue)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CloudEventAttributeValue {
    // message oneof groups
    pub attr: ::std::option::Option<cloud_event_attribute_value::Attr>,
    // special fields
    // @@protoc_insertion_point(special_field:CloudEvents.CloudEventAttributeValue.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CloudEventAttributeValue {
    fn default() -> &'a CloudEventAttributeValue {
        <CloudEventAttributeValue as ::protobuf::Message>::default_instance()
    }
}

impl CloudEventAttributeValue {
    pub fn new() -> CloudEventAttributeValue {
        ::std::default::Default::default()
    }

    // bool ce_boolean = 1;

    pub fn ce_boolean(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBoolean(v)) => v,
            _ => false,
        }
    }

    pub fn clear_ce_boolean(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_boolean(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBoolean(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_boolean(&mut self, v: bool) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBoolean(v))
    }

    // int32 ce_integer = 2;

    pub fn ce_integer(&self) -> i32 {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeInteger(v)) => v,
            _ => 0,
        }
    }

    pub fn clear_ce_integer(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_integer(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeInteger(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_integer(&mut self, v: i32) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeInteger(v))
    }

    // string ce_string = 3;

    pub fn ce_string(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_ce_string(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_string(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_string(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_string(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_string(&mut self) -> ::std::string::String {
        if self.has_ce_string() {
            match self.attr.take() {
                ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes ce_bytes = 4;

    pub fn ce_bytes(&self) -> &[u8] {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_ce_bytes(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_bytes(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(::std::vec::Vec::new()));
        }
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_bytes(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_ce_bytes() {
            match self.attr.take() {
                ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string ce_uri = 5;

    pub fn ce_uri(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_ce_uri(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_uri(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_uri(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_uri(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_uri(&mut self) -> ::std::string::String {
        if self.has_ce_uri() {
            match self.attr.take() {
                ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string ce_uri_ref = 6;

    pub fn ce_uri_ref(&self) -> &str {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_ce_uri_ref(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_uri_ref(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_uri_ref(&mut self, v: ::std::string::String) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_uri_ref(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(::std::string::String::new()));
        }
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_uri_ref(&mut self) -> ::std::string::String {
        if self.has_ce_uri_ref() {
            match self.attr.take() {
                ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Timestamp ce_timestamp = 7;

    pub fn ce_timestamp(&self) -> &::protobuf::well_known_types::timestamp::Timestamp {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(ref v)) => v,
            _ => <::protobuf::well_known_types::timestamp::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ce_timestamp(&mut self) {
        self.attr = ::std::option::Option::None;
    }

    pub fn has_ce_timestamp(&self) -> bool {
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ce_timestamp(&mut self, v: ::protobuf::well_known_types::timestamp::Timestamp) {
        self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ce_timestamp(&mut self) -> &mut ::protobuf::well_known_types::timestamp::Timestamp {
        if let ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(_)) = self.attr {
        } else {
            self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(::protobuf::well_known_types::timestamp::Timestamp::new()));
        }
        match self.attr {
            ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ce_timestamp(&mut self) -> ::protobuf::well_known_types::timestamp::Timestamp {
        if self.has_ce_timestamp() {
            match self.attr.take() {
                ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::timestamp::Timestamp::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ce_boolean",
            CloudEventAttributeValue::has_ce_boolean,
            CloudEventAttributeValue::ce_boolean,
            CloudEventAttributeValue::set_ce_boolean,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "ce_integer",
            CloudEventAttributeValue::has_ce_integer,
            CloudEventAttributeValue::ce_integer,
            CloudEventAttributeValue::set_ce_integer,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "ce_string",
            CloudEventAttributeValue::has_ce_string,
            CloudEventAttributeValue::ce_string,
            CloudEventAttributeValue::set_ce_string,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "ce_bytes",
            CloudEventAttributeValue::has_ce_bytes,
            CloudEventAttributeValue::ce_bytes,
            CloudEventAttributeValue::set_ce_bytes,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "ce_uri",
            CloudEventAttributeValue::has_ce_uri,
            CloudEventAttributeValue::ce_uri,
            CloudEventAttributeValue::set_ce_uri,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "ce_uri_ref",
            CloudEventAttributeValue::has_ce_uri_ref,
            CloudEventAttributeValue::ce_uri_ref,
            CloudEventAttributeValue::set_ce_uri_ref,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ce_timestamp",
            CloudEventAttributeValue::has_ce_timestamp,
            CloudEventAttributeValue::ce_timestamp,
            CloudEventAttributeValue::mut_ce_timestamp,
            CloudEventAttributeValue::set_ce_timestamp,
        ));
        oneofs.push(cloud_event_attribute_value::Attr::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CloudEventAttributeValue>(
            "CloudEventAttributeValue",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CloudEventAttributeValue {
    const NAME: &'static str = "CloudEventAttributeValue";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBoolean(is.read_bool()?));
                },
                16 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeInteger(is.read_int32()?));
                },
                26 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeString(is.read_string()?));
                },
                34 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeBytes(is.read_bytes()?));
                },
                42 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUri(is.read_string()?));
                },
                50 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeUriRef(is.read_string()?));
                },
                58 => {
                    self.attr = ::std::option::Option::Some(cloud_event_attribute_value::Attr::CeTimestamp(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.attr {
            match v {
                &cloud_event_attribute_value::Attr::CeBoolean(v) => {
                    my_size += 1 + 1;
                },
                &cloud_event_attribute_value::Attr::CeInteger(v) => {
                    my_size += ::protobuf::rt::int32_size(2, v);
                },
                &cloud_event_attribute_value::Attr::CeString(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &cloud_event_attribute_value::Attr::CeBytes(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &cloud_event_attribute_value::Attr::CeUri(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &cloud_event_attribute_value::Attr::CeUriRef(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &cloud_event_attribute_value::Attr::CeTimestamp(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.attr {
            match v {
                &cloud_event_attribute_value::Attr::CeBoolean(v) => {
                    os.write_bool(1, v)?;
                },
                &cloud_event_attribute_value::Attr::CeInteger(v) => {
                    os.write_int32(2, v)?;
                },
                &cloud_event_attribute_value::Attr::CeString(ref v) => {
                    os.write_string(3, v)?;
                },
                &cloud_event_attribute_value::Attr::CeBytes(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &cloud_event_attribute_value::Attr::CeUri(ref v) => {
                    os.write_string(5, v)?;
                },
                &cloud_event_attribute_value::Attr::CeUriRef(ref v) => {
                    os.write_string(6, v)?;
                },
                &cloud_event_attribute_value::Attr::CeTimestamp(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CloudEventAttributeValue {
        CloudEventAttributeValue::new()
    }

    fn clear(&mut self) {
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.attr = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CloudEventAttributeValue {
        static instance: CloudEventAttributeValue = CloudEventAttributeValue {
            attr: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CloudEventAttributeValue {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CloudEventAttributeValue").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CloudEventAttributeValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloudEventAttributeValue {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `CloudEventAttributeValue`
pub mod cloud_event_attribute_value {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:CloudEvents.CloudEventAttributeValue.attr)
    pub enum Attr {
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_boolean)
        CeBoolean(bool),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_integer)
        CeInteger(i32),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_string)
        CeString(::std::string::String),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_bytes)
        CeBytes(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_uri)
        CeUri(::std::string::String),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_uri_ref)
        CeUriRef(::std::string::String),
        // @@protoc_insertion_point(oneof_field:CloudEvents.CloudEventAttributeValue.ce_timestamp)
        CeTimestamp(::protobuf::well_known_types::timestamp::Timestamp),
    }

    impl ::protobuf::Oneof for Attr {
    }

    impl ::protobuf::OneofFull for Attr {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::CloudEventAttributeValue as ::protobuf::MessageFull>::descriptor().oneof_by_name("attr").unwrap()).clone()
        }
    }

    impl Attr {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Attr>("attr")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19protobuf/cloudevent.proto\x12\x0bCloudEvents\x1a\x19google/protobu\
    f/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x9b\x03\n\nCloudEve\
    nt\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06source\x18\x02\
    \x20\x01(\tR\x06source\x12!\n\x0cspec_version\x18\x03\x20\x01(\tR\x0bspe\
    cVersion\x12\x12\n\x04type\x18\x04\x20\x01(\tR\x04type\x12G\n\nattribute\
    s\x18\x05\x20\x03(\x0b2'.CloudEvents.CloudEvent.AttributesEntryR\nattrib\
    utes\x12!\n\x0bbinary_data\x18\x06\x20\x01(\x0cH\0R\nbinaryData\x12\x1d\
    \n\ttext_data\x18\x07\x20\x01(\tH\0R\x08textData\x125\n\nproto_data\x18\
    \x08\x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\tprotoData\x1ad\n\x0fAttr\
    ibutesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12;\n\x05value\
    \x18\x02\x20\x01(\x0b2%.CloudEvents.CloudEventAttributeValueR\x05value:\
    \x028\x01B\x06\n\x04data\"\x9a\x02\n\x18CloudEventAttributeValue\x12\x1f\
    \n\nce_boolean\x18\x01\x20\x01(\x08H\0R\tceBoolean\x12\x1f\n\nce_integer\
    \x18\x02\x20\x01(\x05H\0R\tceInteger\x12\x1d\n\tce_string\x18\x03\x20\
    \x01(\tH\0R\x08ceString\x12\x1b\n\x08ce_bytes\x18\x04\x20\x01(\x0cH\0R\
    \x07ceBytes\x12\x17\n\x06ce_uri\x18\x05\x20\x01(\tH\0R\x05ceUri\x12\x1e\
    \n\nce_uri_ref\x18\x06\x20\x01(\tH\0R\x08ceUriRef\x12?\n\x0cce_timestamp\
    \x18\x07\x20\x01(\x0b2\x1a.google.protobuf.TimestampH\0R\x0bceTimestampB\
    \x06\n\x04attrB\nZ\x08/;eventsJ\xf5\x0f\n\x06\x12\x04\0\0<\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x14\n\x08\n\x01\
    \x08\x12\x03\x04\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x04\0\x1f\n\t\n\x02\x03\
    \0\x12\x03\x06\0#\n\t\n\x02\x03\x01\x12\x03\x07\0)\nl\n\x02\x04\0\x12\
    \x04\x0b\0&\x01\x1a`\x20CloudEvent\x20is\x20copied\x20from\n\x20https://\
    github.com/cloudevents/spec/blob/master/protobuf-format.md.\n\n\n\n\x03\
    \x04\0\x01\x12\x03\x0b\x08\x12\n'\n\x04\x04\0\x02\0\x12\x03\r\x02\x10\
    \x1a\x1a\x20Unique\x20event\x20identifier.\n\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\r\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\t\x0b\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\r\x0e\x0f\n'\n\x04\x04\0\x02\x01\x12\x03\
    \x0f\x02\x14\x1a\x1a\x20URI\x20of\x20the\x20event\x20source.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x0f\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x0f\t\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x0f\x12\x13\n*\
    \n\x04\x04\0\x02\x02\x12\x03\x11\x02\x1a\x1a\x1d\x20Version\x20of\x20the\
    \x20spec\x20in\x20use.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x11\x02\
    \x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x11\t\x15\n\x0c\n\x05\x04\0\
    \x02\x02\x03\x12\x03\x11\x18\x19\n%\n\x04\x04\0\x02\x03\x12\x03\x13\x02\
    \x12\x1a\x18\x20Event\x20type\x20identifier.\n\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x13\t\r\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x13\x10\x11\n.\n\x04\x04\0\x02\x04\
    \x12\x03\x16\x027\x1a!\x20Optional\x20&\x20Extension\x20Attributes\n\n\
    \x0c\n\x05\x04\0\x02\x04\x06\x12\x03\x16\x02'\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\x16(2\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x1656\n7\n\x04\
    \x04\0\x08\0\x12\x04\x19\x02%\x03\x1a)\x20CloudEvent\x20Data\x20(Bytes,\
    \x20Text,\x20or\x20Proto)\n\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x19\x08\
    \x0c\nz\n\x04\x04\0\x02\x05\x12\x03\x1c\x04\x1a\x1am\x20If\x20the\x20eve\
    nt\x20is\x20binary\x20data\x20then\x20the\x20datacontenttype\x20attribut\
    e\n\x20should\x20be\x20set\x20to\x20an\x20appropriate\x20media-type.\n\n\
    \x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x1c\x04\t\n\x0c\n\x05\x04\0\x02\x05\
    \x01\x12\x03\x1c\n\x15\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x1c\x18\x19\
    \n\x94\x01\n\x04\x04\0\x02\x06\x12\x03\x1f\x04\x19\x1a\x86\x01\x20If\x20\
    the\x20event\x20is\x20string\x20data\x20then\x20the\x20datacontenttype\
    \x20attribute\n\x20should\x20be\x20set\x20to\x20an\x20appropriate\x20med\
    ia-type\x20such\x20as\x20application/json.\n\n\x0c\n\x05\x04\0\x02\x06\
    \x05\x12\x03\x1f\x04\n\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1f\x0b\x14\
    \n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x1f\x17\x18\n\xd4\x01\n\x04\x04\0\
    \x02\x07\x12\x03$\x04'\x1a\xc6\x01\x20If\x20the\x20event\x20is\x20a\x20p\
    rotobuf\x20then\x20it\x20must\x20be\x20encoded\x20using\x20this\x20Any\n\
    \x20type.\x20The\x20datacontenttype\x20attribute\x20should\x20be\x20set\
    \x20to\n\x20application/protobuf\x20and\x20the\x20dataschema\x20attribut\
    e\x20set\x20to\x20the\x20message\n\x20type.\n\n\x0c\n\x05\x04\0\x02\x07\
    \x06\x12\x03$\x04\x17\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03$\x18\"\n\x0c\
    \n\x05\x04\0\x02\x07\x03\x12\x03$%&\n\x81\x01\n\x02\x04\x01\x12\x04*\0<\
    \x01\x1au\x20CloudEventAttribute\x20enables\x20extensions\x20to\x20use\
    \x20any\x20of\x20the\x20seven\x20allowed\n\x20data\x20types\x20as\x20the\
    \x20value\x20of\x20an\x20envelope\x20key.\n\n\n\n\x03\x04\x01\x01\x12\
    \x03*\x08\x20\n8\n\x04\x04\x01\x08\0\x12\x04,\x02;\x03\x1a*\x20The\x20va\
    lue\x20can\x20be\x20any\x20one\x20of\x20these\x20types.\n\n\x0c\n\x05\
    \x04\x01\x08\0\x01\x12\x03,\x08\x0c\n\x1d\n\x04\x04\x01\x02\0\x12\x03.\
    \x04\x18\x1a\x10\x20Boolean\x20value.\n\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x03.\x04\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03.\t\x13\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03.\x16\x17\n\x1d\n\x04\x04\x01\x02\x01\x12\
    \x030\x04\x19\x1a\x10\x20Integer\x20value.\n\n\x0c\n\x05\x04\x01\x02\x01\
    \x05\x12\x030\x04\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x030\n\x14\n\x0c\
    \n\x05\x04\x01\x02\x01\x03\x12\x030\x17\x18\n\x1c\n\x04\x04\x01\x02\x02\
    \x12\x032\x04\x19\x1a\x0f\x20String\x20value.\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x032\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x032\x0b\x14\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x032\x17\x18\n!\n\x04\x04\x01\x02\
    \x03\x12\x034\x04\x17\x1a\x14\x20Byte\x20string\x20value.\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x034\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\
    \x034\n\x12\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x034\x15\x16\n\x19\n\x04\
    \x04\x01\x02\x04\x12\x036\x04\x16\x1a\x0c\x20URI\x20value.\n\n\x0c\n\x05\
    \x04\x01\x02\x04\x05\x12\x036\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x036\x0b\x11\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x036\x14\x15\n#\n\x04\
    \x04\x01\x02\x05\x12\x038\x04\x1a\x1a\x16\x20URI\x20reference\x20value.\
    \n\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x038\x04\n\n\x0c\n\x05\x04\x01\
    \x02\x05\x01\x12\x038\x0b\x15\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x038\
    \x18\x19\n\x1f\n\x04\x04\x01\x02\x06\x12\x03:\x04/\x1a\x12\x20Timestamp\
    \x20value.\n\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03:\x04\x1d\n\x0c\n\
    \x05\x04\x01\x02\x06\x01\x12\x03:\x1e*\n\x0c\n\x05\x04\x01\x02\x06\x03\
    \x12\x03:-.b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(::protobuf::well_known_types::any::file_descriptor().clone());
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(CloudEvent::generated_message_descriptor_data());
            messages.push(CloudEventAttributeValue::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
