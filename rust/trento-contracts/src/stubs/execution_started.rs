// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobuf/execution_started.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Trento.Checks.V1.ExecutionStarted)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ExecutionStarted {
    // message fields
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionStarted.execution_id)
    pub execution_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionStarted.group_id)
    pub group_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionStarted.targets)
    pub targets: ::std::vec::Vec<super::target::Target>,
    // @@protoc_insertion_point(field:Trento.Checks.V1.ExecutionStarted.target_type)
    pub target_type: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Trento.Checks.V1.ExecutionStarted.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ExecutionStarted {
    fn default() -> &'a ExecutionStarted {
        <ExecutionStarted as ::protobuf::Message>::default_instance()
    }
}

impl ExecutionStarted {
    pub fn new() -> ExecutionStarted {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "execution_id",
            |m: &ExecutionStarted| { &m.execution_id },
            |m: &mut ExecutionStarted| { &mut m.execution_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &ExecutionStarted| { &m.group_id },
            |m: &mut ExecutionStarted| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "targets",
            |m: &ExecutionStarted| { &m.targets },
            |m: &mut ExecutionStarted| { &mut m.targets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "target_type",
            |m: &ExecutionStarted| { &m.target_type },
            |m: &mut ExecutionStarted| { &mut m.target_type },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ExecutionStarted>(
            "ExecutionStarted",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ExecutionStarted {
    const NAME: &'static str = "ExecutionStarted";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.execution_id = is.read_string()?;
                },
                18 => {
                    self.group_id = is.read_string()?;
                },
                26 => {
                    self.targets.push(is.read_message()?);
                },
                34 => {
                    self.target_type = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.execution_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.execution_id);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.group_id);
        }
        for value in &self.targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if !self.target_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.target_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.execution_id.is_empty() {
            os.write_string(1, &self.execution_id)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(2, &self.group_id)?;
        }
        for v in &self.targets {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        if !self.target_type.is_empty() {
            os.write_string(4, &self.target_type)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ExecutionStarted {
        ExecutionStarted::new()
    }

    fn clear(&mut self) {
        self.execution_id.clear();
        self.group_id.clear();
        self.targets.clear();
        self.target_type.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ExecutionStarted {
        static instance: ExecutionStarted = ExecutionStarted {
            execution_id: ::std::string::String::new(),
            group_id: ::std::string::String::new(),
            targets: ::std::vec::Vec::new(),
            target_type: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ExecutionStarted {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ExecutionStarted").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ExecutionStarted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecutionStarted {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20protobuf/execution_started.proto\x12\x10Trento.Checks.V1\x1a\x15pr\
    otobuf/target.proto\"\xa5\x01\n\x10ExecutionStarted\x12!\n\x0cexecution_\
    id\x18\x01\x20\x01(\tR\x0bexecutionId\x12\x19\n\x08group_id\x18\x02\x20\
    \x01(\tR\x07groupId\x122\n\x07targets\x18\x03\x20\x03(\x0b2\x18.Trento.C\
    hecks.V1.TargetR\x07targets\x12\x1f\n\x0btarget_type\x18\x04\x20\x01(\tR\
    \ntargetTypeB\nZ\x08/;eventsJ\xbe\x02\n\x06\x12\x04\0\0\x0c\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x19\n\x08\n\x01\
    \x08\x12\x03\x03\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x03\0\x1f\n\t\n\x02\x03\
    \0\x12\x03\x05\0\x1f\n\n\n\x02\x04\0\x12\x04\x07\0\x0c\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x07\x08\x18\n\x0b\n\x04\x04\0\x02\0\x12\x03\x08\x04\x1c\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x08\x0b\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x08\x1a\x1b\n\
    \x0b\n\x04\x04\0\x02\x01\x12\x03\t\x04\x18\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\t\x0b\x13\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\t\x16\x17\n\x0b\n\x04\x04\0\x02\x02\x12\
    \x03\n\x04\x20\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\n\x04\x0c\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\n\r\x13\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03\n\x14\x1b\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\n\x1e\x1f\n\x0b\n\
    \x04\x04\0\x02\x03\x12\x03\x0b\x04\x1b\n\x0c\n\x05\x04\0\x02\x03\x05\x12\
    \x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0b\x0b\x16\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\x0b\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::target::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(ExecutionStarted::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
