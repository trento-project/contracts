// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `protobuf/facts_gathering_requested.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:Trento.Checks.V1.FactRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FactRequest {
    // message fields
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactRequest.check_id)
    pub check_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactRequest.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactRequest.gatherer)
    pub gatherer: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactRequest.argument)
    pub argument: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Trento.Checks.V1.FactRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FactRequest {
    fn default() -> &'a FactRequest {
        <FactRequest as ::protobuf::Message>::default_instance()
    }
}

impl FactRequest {
    pub fn new() -> FactRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "check_id",
            |m: &FactRequest| { &m.check_id },
            |m: &mut FactRequest| { &mut m.check_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &FactRequest| { &m.name },
            |m: &mut FactRequest| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "gatherer",
            |m: &FactRequest| { &m.gatherer },
            |m: &mut FactRequest| { &mut m.gatherer },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "argument",
            |m: &FactRequest| { &m.argument },
            |m: &mut FactRequest| { &mut m.argument },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FactRequest>(
            "FactRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FactRequest {
    const NAME: &'static str = "FactRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.check_id = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.gatherer = is.read_string()?;
                },
                34 => {
                    self.argument = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.check_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.check_id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.gatherer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.gatherer);
        }
        if !self.argument.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.argument);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.check_id.is_empty() {
            os.write_string(1, &self.check_id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.gatherer.is_empty() {
            os.write_string(3, &self.gatherer)?;
        }
        if !self.argument.is_empty() {
            os.write_string(4, &self.argument)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FactRequest {
        FactRequest::new()
    }

    fn clear(&mut self) {
        self.check_id.clear();
        self.name.clear();
        self.gatherer.clear();
        self.argument.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FactRequest {
        static instance: FactRequest = FactRequest {
            check_id: ::std::string::String::new(),
            name: ::std::string::String::new(),
            gatherer: ::std::string::String::new(),
            argument: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FactRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FactRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FactRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FactRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Trento.Checks.V1.FactsGatheringRequestedTarget)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FactsGatheringRequestedTarget {
    // message fields
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactsGatheringRequestedTarget.agent_id)
    pub agent_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactsGatheringRequestedTarget.fact_requests)
    pub fact_requests: ::std::vec::Vec<FactRequest>,
    // special fields
    // @@protoc_insertion_point(special_field:Trento.Checks.V1.FactsGatheringRequestedTarget.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FactsGatheringRequestedTarget {
    fn default() -> &'a FactsGatheringRequestedTarget {
        <FactsGatheringRequestedTarget as ::protobuf::Message>::default_instance()
    }
}

impl FactsGatheringRequestedTarget {
    pub fn new() -> FactsGatheringRequestedTarget {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "agent_id",
            |m: &FactsGatheringRequestedTarget| { &m.agent_id },
            |m: &mut FactsGatheringRequestedTarget| { &mut m.agent_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "fact_requests",
            |m: &FactsGatheringRequestedTarget| { &m.fact_requests },
            |m: &mut FactsGatheringRequestedTarget| { &mut m.fact_requests },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FactsGatheringRequestedTarget>(
            "FactsGatheringRequestedTarget",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FactsGatheringRequestedTarget {
    const NAME: &'static str = "FactsGatheringRequestedTarget";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.agent_id = is.read_string()?;
                },
                18 => {
                    self.fact_requests.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.agent_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.agent_id);
        }
        for value in &self.fact_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.agent_id.is_empty() {
            os.write_string(1, &self.agent_id)?;
        }
        for v in &self.fact_requests {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FactsGatheringRequestedTarget {
        FactsGatheringRequestedTarget::new()
    }

    fn clear(&mut self) {
        self.agent_id.clear();
        self.fact_requests.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FactsGatheringRequestedTarget {
        static instance: FactsGatheringRequestedTarget = FactsGatheringRequestedTarget {
            agent_id: ::std::string::String::new(),
            fact_requests: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FactsGatheringRequestedTarget {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FactsGatheringRequestedTarget").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FactsGatheringRequestedTarget {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FactsGatheringRequestedTarget {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Trento.Checks.V1.FactsGatheringRequested)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct FactsGatheringRequested {
    // message fields
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactsGatheringRequested.execution_id)
    pub execution_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactsGatheringRequested.group_id)
    pub group_id: ::std::string::String,
    // @@protoc_insertion_point(field:Trento.Checks.V1.FactsGatheringRequested.targets)
    pub targets: ::std::vec::Vec<FactsGatheringRequestedTarget>,
    // special fields
    // @@protoc_insertion_point(special_field:Trento.Checks.V1.FactsGatheringRequested.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a FactsGatheringRequested {
    fn default() -> &'a FactsGatheringRequested {
        <FactsGatheringRequested as ::protobuf::Message>::default_instance()
    }
}

impl FactsGatheringRequested {
    pub fn new() -> FactsGatheringRequested {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "execution_id",
            |m: &FactsGatheringRequested| { &m.execution_id },
            |m: &mut FactsGatheringRequested| { &mut m.execution_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "group_id",
            |m: &FactsGatheringRequested| { &m.group_id },
            |m: &mut FactsGatheringRequested| { &mut m.group_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "targets",
            |m: &FactsGatheringRequested| { &m.targets },
            |m: &mut FactsGatheringRequested| { &mut m.targets },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<FactsGatheringRequested>(
            "FactsGatheringRequested",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for FactsGatheringRequested {
    const NAME: &'static str = "FactsGatheringRequested";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.execution_id = is.read_string()?;
                },
                18 => {
                    self.group_id = is.read_string()?;
                },
                26 => {
                    self.targets.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.execution_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.execution_id);
        }
        if !self.group_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.group_id);
        }
        for value in &self.targets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.execution_id.is_empty() {
            os.write_string(1, &self.execution_id)?;
        }
        if !self.group_id.is_empty() {
            os.write_string(2, &self.group_id)?;
        }
        for v in &self.targets {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> FactsGatheringRequested {
        FactsGatheringRequested::new()
    }

    fn clear(&mut self) {
        self.execution_id.clear();
        self.group_id.clear();
        self.targets.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static FactsGatheringRequested {
        static instance: FactsGatheringRequested = FactsGatheringRequested {
            execution_id: ::std::string::String::new(),
            group_id: ::std::string::String::new(),
            targets: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for FactsGatheringRequested {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("FactsGatheringRequested").unwrap()).clone()
    }
}

impl ::std::fmt::Display for FactsGatheringRequested {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FactsGatheringRequested {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(protobuf/facts_gathering_requested.proto\x12\x10Trento.Checks.V1\"t\n\
    \x0bFactRequest\x12\x19\n\x08check_id\x18\x01\x20\x01(\tR\x07checkId\x12\
    \x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x1a\n\x08gatherer\x18\x03\
    \x20\x01(\tR\x08gatherer\x12\x1a\n\x08argument\x18\x04\x20\x01(\tR\x08ar\
    gument\"~\n\x1dFactsGatheringRequestedTarget\x12\x19\n\x08agent_id\x18\
    \x01\x20\x01(\tR\x07agentId\x12B\n\rfact_requests\x18\x02\x20\x03(\x0b2\
    \x1d.Trento.Checks.V1.FactRequestR\x0cfactRequests\"\xa2\x01\n\x17FactsG\
    atheringRequested\x12!\n\x0cexecution_id\x18\x01\x20\x01(\tR\x0bexecutio\
    nId\x12\x19\n\x08group_id\x18\x02\x20\x01(\tR\x07groupId\x12I\n\x07targe\
    ts\x18\x03\x20\x03(\x0b2/.Trento.Checks.V1.FactsGatheringRequestedTarget\
    R\x07targetsB\nZ\x08/;eventsJ\x84\x05\n\x06\x12\x04\0\0\x15\x01\n\x08\n\
    \x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x19\n\x08\n\x01\
    \x08\x12\x03\x03\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x03\0\x1f\n\n\n\x02\x04\
    \0\x12\x04\x05\0\n\x01\n\n\n\x03\x04\0\x01\x12\x03\x05\x08\x13\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x06\x04\x18\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x06\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06\x0b\x13\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x06\x16\x17\n\x0b\n\x04\x04\0\x02\x01\x12\x03\
    \x07\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x07\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\x07\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\x07\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\x04\x18\n\x0c\n\
    \x05\x04\0\x02\x02\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x08\x0b\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x08\x16\x17\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\t\x04\x18\n\x0c\n\x05\x04\0\x02\x03\x05\
    \x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\t\x0b\x13\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03\t\x16\x17\n\n\n\x02\x04\x01\x12\x04\x0c\0\
    \x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0c\x08%\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03\r\x04\x18\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\r\x04\n\n\x0c\
    \n\x05\x04\x01\x02\0\x01\x12\x03\r\x0b\x13\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\r\x16\x17\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0e\x04+\n\x0c\n\
    \x05\x04\x01\x02\x01\x04\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\x01\x02\x01\
    \x06\x12\x03\x0e\r\x18\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0e\x19&\
    \n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x0e)*\n\n\n\x02\x04\x02\x12\x04\
    \x11\0\x15\x01\n\n\n\x03\x04\x02\x01\x12\x03\x11\x08\x1f\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x12\x04\x1c\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x12\
    \x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\x0b\x17\n\x0c\n\x05\x04\
    \x02\x02\0\x03\x12\x03\x12\x1a\x1b\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\
    \x13\x04\x18\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x13\x04\n\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x13\x0b\x13\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x13\x16\x17\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x14\x047\n\
    \x0c\n\x05\x04\x02\x02\x02\x04\x12\x03\x14\x04\x0c\n\x0c\n\x05\x04\x02\
    \x02\x02\x06\x12\x03\x14\r*\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x14+\
    2\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x1456b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(FactRequest::generated_message_descriptor_data());
            messages.push(FactsGatheringRequestedTarget::generated_message_descriptor_data());
            messages.push(FactsGatheringRequested::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
